Constructor:

It's a special method present under a class responsible for initializing the variables of that class
The name of a constructor method is exactly the same name of the class in which it was present and more over its a non-vale returning methods.
Each and every class requires this constructor if we want to create the instance of that class.

it is the responsiblity of a programmer to define a constructor under his class and if he fails to do so, on behalf of the programmer an implicit constructor
an implicit constructor gets defined in that class by themselves

class Test
{
	int i; string s; bool b;    //Initializing the variable
	public Test()
	{
		i = 0;
		s = null;
		b = false;
	}
}


- Implicit constructor are also known as default constructors(parameterless).
- These default constructor are public
- we can also define a constructor under a class and these contructor are call explicit constructor
which can be both parameterize or parameterless.

[<modifiers>] <Name> ([<parameter list>])
{
-stmts
}

Defining: Implicit or Explicit
Calling: Explicit


Types of Constructors:
1. Default or Parameterless constructor
2. Parameterized Constructor
3. Copy Constructor
4. Static Constructor


parameterized constructor:
If a constructor method is defined with any parameters we call that as parameterized constructor and these constructors
can be defined by the programmers only but never can be defined implicitly.



Copy Constructor:
If we want to create multiple instances with the same values then we use these copy constructors,  in a copy constructor
the constructor takes the same class as a parameter to it.

Static Constructor;
If a Constructor is explicitly declared by using static modifier we call that as Static Constructor.
Mosting used constructor in this project are non static or instance constructors

class Test
{
static Test() //Static constructor defined explicitly
{
}
public Test(){} //Implicit default constructor

}

1. If a class contains any static variables then only implicit static constructor will be present orelse we 
need to defince them explicitly whereas non-static constructors will be implicitly defined in every class (except static class) provided
we did not define them explicitly.

2 . Static constructors are responsible for initializing static variables
and these constructors are never called explicitlu , they are implicitly called moreover these constructors are first to execute in any class.

3. Static constructors cannot be parameterized so overloading static constructors is not possible